{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Step1: define the function to add income"
      ],
      "metadata": {
        "id": "eVxSHeOMND2r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# let the data can save in list\n",
        "income_list = []\n",
        "\n",
        "# create a function for add income\n",
        "def add_income():\n",
        "  description_i = input('Enter a description: ') #ask user for the description of income\n",
        "  while True:  # make a loop to let user input the right number\n",
        "    try:  #ask user the number of income\n",
        "       income = float(input(\"Enter the amount of income: \"))\n",
        "       if income <= 0:  #check the number of income is >0\n",
        "         print(\"Income amount must be greater than 0. Please try again.\")\n",
        "       else:\n",
        "         break  #exit the loop\n",
        "    except ValueError:  #to prevent user input word\n",
        "         print('Please write the correct income!')\n",
        "\n",
        "  # set the format of income\n",
        "  income_entry = {\n",
        "      'description': description_i,\n",
        "      'income': income\n",
        "}\n",
        "  income_list.append(income_entry)  #add the income to the list\n",
        "  print(f\"Income added:{description_i} - {income:.2f}\")"
      ],
      "metadata": {
        "id": "MXx4n5jQN1Pn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#2. create the function about add an expense\n",
        "expense_list = []  #to save the expense data in list\n",
        "def add_expense():  # create a function for add expense\n",
        "  description_e = input('Enter a description: ')  #ask user the description for expense\n",
        "  while True:  # make a loop to let user input the right number\n",
        "    try:   #ask user the number of expense\n",
        "       expense = float(input(\"Enter the amount of expense: \"))\n",
        "       if expense <= 0:  #to check expense is >0\n",
        "         print(\"Expense amount must be greater than 0. Please try again.\")\n",
        "       else:\n",
        "         break #stop check the number\n",
        "    except ValueError:\n",
        "         print('Please write the correct expense!')\n",
        "  category = input('Enter a category: ')\n",
        "\n",
        "  #set the format of expense data\n",
        "  expense_entry ={\n",
        "      'description': description_e,\n",
        "      'expense': expense,\n",
        "      'category': category\n",
        "}\n",
        "  expense_list.append(expense_entry)  #add the expense to the list\n",
        "  print(f\"Expense added: {description_e} - {expense:.2f} - {category}\")"
      ],
      "metadata": {
        "id": "Nn7OHf60Xyry"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#3. define the function to view a budget summary\n",
        "summary_list = []\n",
        "# use the data from [income.list] and [expense.list] to calculate\n",
        "def view_summary():\n",
        "  total_income = sum(entry['income'] for entry in income_list)\n",
        "  total_expense = sum(entry['expense'] for entry in expense_list)\n",
        "  balance = total_income - total_expense\n",
        "\n",
        "  summary_entry = {  #set the format of summary\n",
        "      'total_income': total_income,\n",
        "      'total_expense': total_expense,\n",
        "      'balance': balance\n",
        "  }\n",
        "  summary_list.append(summary_entry)  #add the summary to the list\n",
        "  # show the summary by [print] format\n",
        "  print(\"Budget Summary:\")\n",
        "  print(f\"Total Income: {total_income:.2f}\")\n",
        "  print(f\"Total Expense: {total_expense:.2f}\")\n",
        "  print(f\"Balance: {balance:.2f}\")"
      ],
      "metadata": {
        "id": "jMNTOBS7Cqpw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#4. Define the function to delete an entry\n",
        "def delete_entry():  #ask user which one they want to delete\n",
        "    entry_type = input(\"Did income or expense you want to deleted?\")\n",
        "\n",
        "    if entry_type == 'income':  #ask user which income they want to delete\n",
        "        # to find the income match with data\n",
        "        description_i = input(\"Please enter the description of the income to be deleted:\")\n",
        "        for entry in income_list:\n",
        "            if entry['description'] == description_i:\n",
        "                income_list.remove(entry)  #delete the list\n",
        "                print(f\"income '{description_i}' is deleted.\")\n",
        "                return\n",
        "        print(\"The income entries is not found.\")\n",
        "\n",
        "    elif entry_type == 'expense':  #ask user which expense they want to delete\n",
        "        # to find the expense match with data\n",
        "        description_e = input(\"Please enter the description of the expence to be deleted:\")\n",
        "        for entry in expense_list:\n",
        "            if entry['description'] == description_e:\n",
        "                expense_list.remove(entry)  #delete the list\n",
        "                print(f\"expence '{description_e}' is deleted.\")\n",
        "                return\n",
        "        print(\"The expence entrise is not found.\")\n",
        "\n",
        "    else:\n",
        "        print(\"Invalid input, please enter 'income' or 'expenses'.\")"
      ],
      "metadata": {
        "id": "PxYi4cFtr7TJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#5. Define the function to modify an entry\n",
        "attempt = 0\n",
        "def modify_entry(income_list, expense_list):\n",
        "  choice = input(\"Do you want to modify an 'income' or an 'expense'? \").lower()\n",
        "  if choice == 'income':\n",
        "    # Ask for the description of the income entry to modify\n",
        "    des_i = input(\"Enter the description of the income you want to modify: \")\n",
        "    for entry in income_list:\n",
        "      if entry['description'] == des_i:\n",
        "      # Ask for new details\n",
        "        des_i_n = input(\"Enter the new description: \")\n",
        "        income_n = float(input(\"Enter the new income: \"))\n",
        "        # Update the entry with the new details\n",
        "        income_list[income_list.index(entry)]['description'] = des_i_n\n",
        "        income_list[income_list.index(entry)]['income'] = income_n\n",
        "        print(f\"Income entry '{des_i_n}' has been updated successfully.\")\n",
        "        break\n",
        "      if des_i not in income_list:\n",
        "        print(f\"No income entry with description '{des_i}' found.\")\n",
        "\n",
        "  elif choice == 'expense':\n",
        "    des_e = input(\"Enter the description of the expense you want to modify: \")\n",
        "    for entry in expense_list:\n",
        "      if entry['description'] == des_e:\n",
        "        # Ask for new details\n",
        "        des_e_n = input(\"Enter the new description: \")\n",
        "        expense_n = float(input(\"Enter the new expence: \"))\n",
        "        category_n = input(\"Enter the new category: \")\n",
        "        # Update the entry with the new details\n",
        "        expense_list[expense_list.index(entry)]['description'] = des_e_n\n",
        "        expense_list[expense_list.index(entry)]['expense'] = expense_n\n",
        "        expense_list[expense_list.index(entry)]['category'] = category_n\n",
        "        print(f\"Expense entry '{des_e_n}' has been updated successfully.\")\n",
        "        break\n",
        "\n",
        "      if des_e_n not in expense_list:\n",
        "        print(f\"No expense entry with description '{des_e_n}' found.\")\n",
        "\n",
        "  else:\n",
        "    print(\"Invalid choice. Please choose either 'income' or 'expense'.\")"
      ],
      "metadata": {
        "id": "O5ZTIS5HUaUh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#6. Define the function to list all income and expense entries\n",
        "def list_entries():\n",
        "  print(\"Income Entries:\")\n",
        "  for entry in income_list:  #find data from income.list and print by same format\n",
        "    print(f\"Description: {entry['description']}, Income: {entry['income']}\")\n",
        "\n",
        "  print(\"Expense Entries:\")\n",
        "  for entry in expense_list:  #find data from expense.list and print by same format\n",
        "    print(f\"Description: {entry['description']}, Expense: {entry['expense']}, Category: {entry['category']}\")"
      ],
      "metadata": {
        "id": "AaE9OtNpFnaS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#7. create the main function\n",
        "def main():\n",
        "  while True:  #make a loop to let menu keep show until exit\n",
        "    print(\"\\nBudgeting App Menu:\")\n",
        "    print(\"1. Add Income\")\n",
        "    print(\"2. Add Expense\")\n",
        "    print(\"3. View Budget Summary\")\n",
        "    print(\"4. Delete an Entry\")\n",
        "    print(\"5. Modify an Entry\")\n",
        "    print(\"6. List All Entries\")\n",
        "    print(\"7. Exit\")\n",
        "\n",
        "    #ask user which functions they want to use\n",
        "    choice = input(\"Enter your choice (1-7): \")\n",
        "    if choice == '1':\n",
        "      add_income()  # run add_income function\n",
        "    elif choice == '2':\n",
        "      add_expense() # run add_expense function\n",
        "    elif choice == '3':\n",
        "      view_summary() # run view_summary function\n",
        "    elif choice == '4':\n",
        "      delete_entry() # run delete_entry function\n",
        "    elif choice == '5':\n",
        "      modify_entry(income_list, expense_list) # run modufy-entry function\n",
        "    elif choice == '6':\n",
        "      list_entries() # run list_entries function\n",
        "    elif choice == '7':\n",
        "      print(\"Exiting the Budgeting App. Goodbye!\")\n",
        "      break # exit the loop and stop the program\n",
        "    else:\n",
        "      print(\"Invalid choice. Please enter a number between 1 and 7.\")\n",
        "      #to prevent user wrong input\n",
        "\n",
        "main()"
      ],
      "metadata": {
        "id": "3cVRQ_1-GlZH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "79c3262c-86df-47c0-b04f-6013effa3057"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Budgeting App Menu:\n",
            "1. Add Income\n",
            "2. Add Expense\n",
            "3. View Budget Summary\n",
            "4. Delete an Entry\n",
            "5. Modify an Entry\n",
            "6. List All Entries\n",
            "7. Exit\n",
            "Enter your choice (1-7): 1\n",
            "Enter a description: income\n",
            "Enter the amount of income: 330\n",
            "Income added:income - 330.00\n",
            "\n",
            "Budgeting App Menu:\n",
            "1. Add Income\n",
            "2. Add Expense\n",
            "3. View Budget Summary\n",
            "4. Delete an Entry\n",
            "5. Modify an Entry\n",
            "6. List All Entries\n",
            "7. Exit\n",
            "Enter your choice (1-7): 6\n",
            "Income Entries:\n",
            "Description: income, Income: 330.0\n",
            "Expense Entries:\n",
            "\n",
            "Budgeting App Menu:\n",
            "1. Add Income\n",
            "2. Add Expense\n",
            "3. View Budget Summary\n",
            "4. Delete an Entry\n",
            "5. Modify an Entry\n",
            "6. List All Entries\n",
            "7. Exit\n",
            "Enter your choice (1-7): 4\n",
            "Did income or expense you want to deleted?income\n",
            "Please enter the description of the income to be deleted:income\n",
            "income 'income' is deleted.\n",
            "\n",
            "Budgeting App Menu:\n",
            "1. Add Income\n",
            "2. Add Expense\n",
            "3. View Budget Summary\n",
            "4. Delete an Entry\n",
            "5. Modify an Entry\n",
            "6. List All Entries\n",
            "7. Exit\n",
            "Enter your choice (1-7): 6\n",
            "Income Entries:\n",
            "Expense Entries:\n",
            "\n",
            "Budgeting App Menu:\n",
            "1. Add Income\n",
            "2. Add Expense\n",
            "3. View Budget Summary\n",
            "4. Delete an Entry\n",
            "5. Modify an Entry\n",
            "6. List All Entries\n",
            "7. Exit\n",
            "Enter your choice (1-7): 3\n",
            "Budget Summary:\n",
            "Total Income: 0.00\n",
            "Total Expense: 0.00\n",
            "Balance: 0.00\n",
            "\n",
            "Budgeting App Menu:\n",
            "1. Add Income\n",
            "2. Add Expense\n",
            "3. View Budget Summary\n",
            "4. Delete an Entry\n",
            "5. Modify an Entry\n",
            "6. List All Entries\n",
            "7. Exit\n",
            "Enter your choice (1-7): 7\n",
            "Exiting the Budgeting App. Goodbye!\n"
          ]
        }
      ]
    }
  ]
}